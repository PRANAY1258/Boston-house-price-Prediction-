# -*- coding: utf-8 -*-
"""Linear Regression with ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YxxbvJqbPr0VpHmvFQ4D4fJ14CEkaJjD
"""

# import libraries 

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.datasets import load_boston 

boston = load_boston()

print(boston)

print(boston.data)

print(boston.feature_names)

print(boston.target)

dataset = pd.DataFrame(boston.data)
dataset

data = pd.DataFrame(boston.data,columns = boston.feature_names)
data.head()

data['TARGET'] = boston.target

data.head()

data.info()

data.isnull().sum()

data.dtypes

data =data.drop_duplicates()

data.shape

data.describe()

IQR = data.CRIM.quantile(0.75) - data.CRIM.quantile(0.25)

upper_threshold = data.CRIM.quantile(0.75) + (IQR*1.5)
lower_threshold = data.CRIM.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.ZN.quantile(0.75) - data.ZN.quantile(0.25)

upper_threshold = data.ZN.quantile(0.75) + (IQR*1.5)
lower_threshold = data.ZN.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.INDUS.quantile(0.75) - data.INDUS.quantile(0.25)

upper_threshold = data.INDUS.quantile(0.75) + (IQR*1.5)
lower_threshold = data.INDUS.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.CHAS.quantile(0.75) - data.CHAS.quantile(0.25)

upper_threshold = data.CHAS.quantile(0.75) + (IQR*1.5)
lower_threshold = data.CHAS.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.NOX.quantile(0.75) - data.NOX.quantile(0.25)

upper_threshold = data.NOX.quantile(0.75) + (IQR*1.5)
lower_threshold = data.NOX.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.RM.quantile(0.75) - data.RM.quantile(0.25)

upper_threshold = data.RM.quantile(0.75) + (IQR*1.5)
lower_threshold = data.RM.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.AGE.quantile(0.75) - data.AGE.quantile(0.25)

upper_threshold = data.AGE.quantile(0.75) + (IQR*1.5)
lower_threshold = data.AGE.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.DIS.quantile(0.75) - data.DIS.quantile(0.25)

upper_threshold = data.DIS.quantile(0.75) + (IQR*1.5)
lower_threshold = data.DIS.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.RAD.quantile(0.75) - data.RAD.quantile(0.25)

upper_threshold = data.RAD.quantile(0.75) + (IQR*1.5)
lower_threshold = data.RAD.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.TAX.quantile(0.75) - data.TAX.quantile(0.25)

upper_threshold = data.TAX.quantile(0.75) + (IQR*1.5)
lower_threshold = data.TAX.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.PTRATIO.quantile(0.75) - data.PTRATIO.quantile(0.25)

upper_threshold = data.PTRATIO.quantile(0.75) + (IQR*1.5)
lower_threshold = data.PTRATIO.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.B.quantile(0.75) - data.B.quantile(0.25)

upper_threshold = data.B.quantile(0.75) + (IQR*1.5)
lower_threshold = data.B.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

IQR = data.LSTAT.quantile(0.75) - data.LSTAT.quantile(0.25)

upper_threshold = data.LSTAT.quantile(0.75) + (IQR*1.5)
lower_threshold = data.LSTAT.quantile(0.25) - (IQR*1.5)
lower_threshold , upper_threshold

data.corr()

sns.pairplot(data)

data.head()

"""# **EDA (Exploratory Data Analysis)**"""

sns.scatterplot(x = data['CRIM'], y= data['TARGET'])

data[['CRIM','TARGET']].corr()

sns.regplot(x=data['CRIM'],y = data['TARGET'],data =data)

sns.regplot(x=data['ZN'],y = data['TARGET'],data =data)
data[['ZN','TARGET']].corr()

sns.regplot(x=data['INDUS'],y = data['TARGET'],data =data)
data[['INDUS','TARGET']].corr()

sns.regplot(x=data['CHAS'],y = data['TARGET'],data =data)
data[['CHAS','TARGET']].corr()

sns.regplot(x=data['NOX'],y = data['TARGET'],data =data)
data[['NOX','TARGET']].corr()

sns.regplot(x=data['RM'],y = data['TARGET'],data =data)
data[['RM','TARGET']].corr()

sns.regplot(x=data['AGE'],y = data['TARGET'],data =data)
data[['AGE','TARGET']].corr()

sns.regplot(x=data['DIS'],y = data['TARGET'],data =data)
data[['DIS','TARGET']].corr()

sns.regplot(x=data['RAD'],y = data['TARGET'],data =data)
data[['RAD','TARGET']].corr()

sns.regplot(x=data['TAX'],y = data['TARGET'],data =data)
data[['TAX','TARGET']].corr()

sns.regplot(x=data['PTRATIO'],y = data['TARGET'],data =data)
data[['PTRATIO','TARGET']].corr()

sns.regplot(x=data['B'],y = data['TARGET'],data =data)
data[['B','TARGET']].corr()

sns.regplot(x=data['LSTAT'],y = data['TARGET'],data =data)
data[['LSTAT','TARGET']].corr()

sns.distplot(data['TARGET'])

sns.distplot(np.log(data['TARGET']))

"""# **Splitting The Data**"""

from sklearn.model_selection import train_test_split

x = data.drop(['TARGET'],axis = 1) #Features variables
y = data['TARGET'] #Target variable

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state = 7)

x_test

y_test

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import r2_score,mean_absolute_error
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor

"""# **Scaling**"""

scaler = StandardScaler()

scaler.fit(x_train,y_train)
x_train_scaled = scaler.transform(x_train)
x_test_scaled = scaler.transform(x_test)

minmax = MinMaxScaler()

minmax.fit(x_train,y_train)
x_train_minmax = minmax.transform(x_train)
x_test_minmax = minmax.transform(x_test)

"""# **LinearRegression**"""

lr  = LinearRegression() # Inisalising the model

lr.fit(x_train_scaled,y_train) # fiting the model

lr.coef_ # coefficient

lr.intercept_  #  intercept

# prediction with the x_test

y_pred = lr.predict(x_test_scaled)

y_pred

"""# **Assumptions**"""

#plot a scatter plot for the predcition

sns.scatterplot(x=y_test , y = y_pred)

# calculating residuals (means error)

residuals = y_test-y_pred

residuals

# plot this residuals 


sns.displot(residuals,kind = 'kde')

# uniformly distribution 
sns.scatterplot(x =y_pred , y = residuals)

from sklearn.metrics import mean_absolute_error ,mean_squared_error


print(mean_absolute_error(y_test,y_pred))

print(mean_squared_error(y_test,y_pred))

print(np.sqrt(mean_squared_error(y_test,y_pred)))

"""# **R square and adjusted r square**

Formula

## R^2 = 1-SSR-SST

R^2 = coefficient of distribution SSR = sum of square of residuals SST = total sum of square
"""

from sklearn.metrics import r2_score 

print('R2_score :',r2_score(y_pred,y_test))

"""# **Predictions**"""

#boston.data[0].shape
boston.data[0].reshape(1,-1)

#Transformation of new data

scaler.transform(boston.data[0].reshape(1,-1))

lr.predict(scaler.transform(boston.data[0].reshape(1,-1)))

import pickle 

pickle.dump(lr,open('regmodel.pkl','wb'))

pickle_model = pickle.load(open('regmodel.pkl','rb'))

pickle_model.predict(scaler.transform(boston.data[0].reshape(1,-1)))



















"""# **Ridge**"""

r = Ridge()

r.fit(x_train,y_train)

y_pred_r = r.predict(x_test)

print('R2_score :',r2_score(y_pred_r,y_test))

"""# **Lasso**"""

l  = Lasso()

l.fit(x_train,y_train)

y_pred_l = l.predict(x_test)

print('R2_score :',r2_score(y_pred_l,y_test))

"""# **KNeighbor Regressor**"""

knn = KNeighborsRegressor()

knn.fit(x_train,y_train)

y_pred_knn = knn.predict(x_test)

print('R2_score :',r2_score(y_pred_knn,y_test))

"""# **DecisionTreeRegressor**"""

dt = DecisionTreeRegressor()

dt.fit(x_train,y_train)

y_pred_dt = dt.predict(x_test)
print('R2_score :',r2_score(y_pred_dt,y_test))

"""# **SVM**"""

svr = SVR()

svr.fit(x_train,y_train)

y_pred_svr= dt.predict(x_test)
print('R2_score :',r2_score(y_pred_svr,y_test))

"""# **Random Forest**"""

rf = RandomForestRegressor()

rf.fit(x_train,y_train)

y_pred_rf= dt.predict(x_test)
print('R2_score :',r2_score(y_pred_rf,y_test))

